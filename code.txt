#data: input data, 
#k : number of clusters
def nmf(data, k):
    print("nmf")

    nmf = NMF(n_components=k, init='random', random_state=13,  max_iter=60000) #random_state=0,

    W = nmf.fit_transform(data)
    H = nmf.components_

    print("data ", data)
    print("W ", W)
    print("H ", H)

    #print("H.shape ", H.shape)
    #print("data.shape ", data.shape)


    ci = [ [] for i in range(k)] #array for each class
    
    #classification of the data points
    for i in range(0, data.shape[0] ):
        ind = np.argmax(W[i, :]) #find the maximum value
        #print("ind ", ind)
        #data[i, :]
        ci[ind].append(data[i, :])

    for i in range(len(ci)):
        ci[i] = np.array(ci[i])
        print("shape ", ci[i].shape)

    return ci
    
    
n_samples = 15
random_state = 170

centers = [(5, 5), (10, 10), (15, 15)]
X, y = datasets.make_blobs(n_samples=n_samples, centers=centers, shuffle=False, random_state=42)

c1i = nmf(X, 3)

c10 = c1i[0]
c11 = c1i[1]
c12 = c1i[2]

fig, (ax1, ax2, ax3) = plt.subplots(3)

ax1.scatter(X[:, 0], X[:, 1])
ax1.set_title("orginal")

ax2.scatter(c0[:, 0], c0[:, 1])
ax2.scatter(c1[:, 0], c1[:, 1])
ax2.scatter(c2[:, 0], c2[:, 1])
ax2.set_title("KMeans")

ax3.scatter(c10[:, 0], c10[:, 1])
ax3.scatter(c11[:, 0], c11[:, 1])
#ax3.scatter(c12[:, 0], c12[:, 1])
ax3.set_title("NMF")


